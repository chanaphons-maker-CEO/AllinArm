<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TTS & STT Web App</title>
    <style>
        body {
            font-family: 'Sarabun', sans-serif;
            background-color: #f0f2f5;
            color: #333;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            padding: 20px;
            gap: 30px;
            flex-wrap: wrap;
        }
        .container {
            background-color: #ffffff;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 500px;
        }
        h2 {
            color: #0056b3;
            border-bottom: 2px solid #0056b3;
            padding-bottom: 10px;
            margin-top: 0;
        }
        textarea, select, button {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border-radius: 5px;
            border: 1px solid #ccc;
            font-size: 1rem;
        }
        textarea {
            height: 120px;
            resize: vertical;
        }
        button {
            background-color: #007bff;
            color: white;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #0056b3;
        }
        .controls {
            display: flex;
            gap: 10px;
        }
        .slider-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        #stt-result {
            border: 1px dashed #ccc;
            padding: 15px;
            min-height: 100px;
            border-radius: 5px;
            background-color: #fafafa;
        }
        #stt-btn.recording {
            background-color: #dc3545;
        }
        #stt-btn.recording:hover {
            background-color: #c82333;
        }
    </style>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Sarabun:wght@400;700&display=swap" rel="stylesheet">
</head>
<body>

    <div class="container">
        <h2>‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Text-to-Speech)</h2>
        <textarea id="tts-text" placeholder="‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á</textarea>
        
        <label for="voice-select">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á:</label>
        <select id="voice-select"></select>
        
        <div class="slider-group">
            <label for="rate-slider">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß: <span id="rate-value">1</span></label>
            <input type="range" id="rate-slider" min="0.5" max="2" value="1" step="0.1">
        </div>
        
        <div class="slider-group">
            <label for="pitch-slider">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á: <span id="pitch-value">1</span></label>
            <input type="range" id="pitch-slider" min="0" max="2" value="1" step="0.1">
        </div>

        <div class="controls">
            <button id="speak-btn">‡∏û‡∏π‡∏î</button>
            <button id="pause-btn">‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß</button>
            <button id="resume-btn">‡∏û‡∏π‡∏î‡∏ï‡πà‡∏≠</button>
        </div>
    </div>

    <div class="container">
        <h2>‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (Speech-to-Text)</h2>
        <button id="stt-btn">üéôÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á</button>
        <label>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:</label>
        <div id="stt-result">...‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á...</div>

        <div id="summary-container" style="margin-top: 20px;">
            <button id="summarize-btn" style="background-color: #28a745;">üìÑ ‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°</button>
            <label>‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:</label>
            <div id="summary-result" style="border: 1px dashed #28a745; padding: 15px; min-height: 80px; border-radius: 5px; background-color: #f0faf2;">...‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•...</div>
        </div>
    </div>

    <script>
        // --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Text-to-Speech (TTS) ---
        const ttsText = document.getElementById('tts-text');
        const voiceSelect = document.getElementById('voice-select');
        const rateSlider = document.getElementById('rate-slider');
        const pitchSlider = document.getElementById('pitch-slider');
        const rateValue = document.getElementById('rate-value');
        const pitchValue = document.getElementById('pitch-value');
        const speakBtn = document.getElementById('speak-btn');
        const pauseBtn = document.getElementById('pause-btn');
        const resumeBtn = document.getElementById('resume-btn');

        let voices = [];
        const utterance = new SpeechSynthesisUtterance();

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
        function populateVoiceList() {
            voices = speechSynthesis.getVoices();
            voiceSelect.innerHTML = '';
            voices.forEach((voice, i) => {
                // ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
                if(voice.lang.includes('th') || voice.lang.includes('en')) {
                    const option = document.createElement('option');
                    option.textContent = `${voice.name} (${voice.lang})`;
                    option.setAttribute('data-lang', voice.lang);
                    option.setAttribute('data-name', voice.name);
                    voiceSelect.appendChild(option);
                }
            });
        }

        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á (‡∏ö‡∏£‡∏≤‡∏ß‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à) ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        speechSynthesis.onvoiceschanged = populateVoiceList;

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô slider
        rateSlider.addEventListener('input', () => rateValue.textContent = rateSlider.value);
        pitchSlider.addEventListener('input', () => pitchValue.textContent = pitchSlider.value);

        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏û‡∏π‡∏î"
        speakBtn.addEventListener('click', () => {
            if (speechSynthesis.speaking) {
                speechSynthesis.cancel(); // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
            }
            const selectedVoiceName = voiceSelect.selectedOptions[0].getAttribute('data-name');
            const selectedVoice = voices.find(voice => voice.name === selectedVoiceName);
            
            utterance.text = ttsText.value;
            utterance.voice = selectedVoice;
            utterance.rate = rateSlider.value;
            utterance.pitch = pitchSlider.value;
            
            speechSynthesis.speak(utterance);
        });

        // ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏û‡∏π‡∏î‡∏ï‡πà‡∏≠
        pauseBtn.addEventListener('click', () => speechSynthesis.pause());
        resumeBtn.addEventListener('click', () => speechSynthesis.resume());


        // --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Speech-to-Text (STT) ---
        const sttBtn = document.getElementById('stt-btn');
        const sttResult = document.getElementById('stt-result');
        const summarizeBtn = document.getElementById('summarize-btn');
        const summaryResult = document.getElementById('summary-result');

        // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (Extractive Summarization) ---
        function extractiveSummary(text, sentenceCount = 2) {
            if (!text) return "";

            // 1. ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (Stop Words) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
            const thaiStopWords = [
                '‡πÅ‡∏•‡∏∞', '‡πÉ‡∏ô', '‡∏ó‡∏µ‡πà', '‡πÄ‡∏õ‡πá‡∏ô', '‡∏≠‡∏¢‡∏π‡πà', '‡πÇ‡∏î‡∏¢', '‡πÑ‡∏î‡πâ', '‡∏Å‡πá', '‡∏Ñ‡∏∑‡∏≠', '‡∏à‡∏∞', '‡πÑ‡∏õ', '‡∏°‡∏≤',
                '‡∏°‡∏µ', '‡πÑ‡∏°‡πà', '‡∏Ç‡∏≠‡∏á', '‡πÉ‡∏´‡πâ', '‡∏Å‡∏≤‡∏£', '‡∏Å‡∏±‡∏ö', '‡πÅ‡∏ï‡πà', '‡∏ß‡πà‡∏≤', '‡∏ô‡∏µ‡πâ', '‡∏ô‡∏±‡πâ‡∏ô', '‡πÄ‡∏û‡∏∑‡πà‡∏≠',
                '‡πÅ‡∏•‡πâ‡∏ß', '‡∏≠‡∏µ‡∏Å', '‡∏ó‡∏∏‡∏Å', '‡πÄ‡∏•‡∏¢', '‡∏î‡∏π', '‡∏ó‡∏≥', '‡πÄ‡∏£‡∏≤', '‡∏ú‡∏°', '‡∏â‡∏±‡∏ô', '‡πÄ‡∏Ç‡∏≤', '‡πÄ‡∏ò‡∏≠',
                '‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏Ñ‡πà‡∏∞', '‡∏ô‡∏∞', '‡πÜ'
            ];

            // 2. ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ (‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏£‡∏£‡∏Ñ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡πà‡∏á)
            const sentences = text.match(/[^.!?\s][^.!?]*(?:[.!?](?!['"]?\s|$)[^.!?]*)*[.!?]?['"]?(?=\s|$)/g) || [];
            if (sentences.length === 0) return text;

            // 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥ (Word Frequencies)
            const wordFrequencies = {};
            const words = text.replace(/[.,!?]/g, '').split(/\s+/);

            words.forEach(word => {
                const lowerWord = word.toLowerCase();
                if (thaiStopWords.indexOf(lowerWord) === -1 && lowerWord.length > 1) {
                    wordFrequencies[lowerWord] = (wordFrequencies[lowerWord] || 0) + 1;
                }
            });

            // 4. ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
            const sentenceScores = {};
            sentences.forEach(sentence => {
                const sentenceWords = sentence.replace(/[.,!?]/g, '').split(/\s+/);
                let score = 0;
                sentenceWords.forEach(word => {
                    const lowerWord = word.toLowerCase();
                    if (wordFrequencies[lowerWord]) {
                        score += wordFrequencies[lowerWord];
                    }
                });
                sentenceScores[sentence] = score;
            });

            // 5. ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            const summarySentences = Object.keys(sentenceScores)
                .sort((a, b) => sentenceScores[b] - sentenceScores[a])
                .slice(0, sentenceCount);

            return summarySentences.join(' ').trim();
        }

        summarizeBtn.addEventListener('click', () => {
            const textToSummarize = sttResult.innerText;
            if (textToSummarize && textToSummarize !== '...‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á...' && textToSummarize !== '...‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ü‡∏±‡∏á...') {
                summaryResult.innerHTML = '<i>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•...</i>';
                // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UI ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏´‡∏ô‡∏±‡∏Å
                setTimeout(() => {
                    const summary = extractiveSummary(textToSummarize, 2); // ‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
                    if (summary) {
                        summaryResult.textContent = summary;
                    } else {
                        summaryResult.textContent = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
                    }
                }, 50);
            } else {
                alert('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•');
                summaryResult.textContent = '...‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•...';
            }
        });


        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏£‡∏≤‡∏ß‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö SpeechRecognition ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        let isListening = false;
        
        if (SpeechRecognition) {
            const recognition = new SpeechRecognition();
            
            // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏π‡∏î
            recognition.continuous = true;
            recognition.interimResults = true;
            recognition.lang = 'th-TH'; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢

            // Event handler ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            recognition.onresult = (event) => {
                let interimTranscript = '';
                let finalTranscript = '';

                for (let i = event.resultIndex; i < event.results.length; i++) {
                    const transcript = event.results[i][0].transcript;
                    if (event.results[i].isFinal) {
                        finalTranscript += transcript;
                    } else {
                        interimTranscript += transcript;
                    }
                }
                // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ
                sttResult.innerHTML = finalTranscript + '<i style="color:grey;">' + interimTranscript + '</i>';
            };
            
            // Event handler ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏á
            recognition.onend = () => {
                sttBtn.textContent = 'üéôÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á';
                sttBtn.classList.remove('recording');
                isListening = false;
            };

            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î ‡∏ü‡∏±‡∏á
            sttBtn.addEventListener('click', () => {
                if (isListening) {
                    recognition.stop();
                } else {
                    sttResult.innerHTML = '...‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ü‡∏±‡∏á...';
                    recognition.start();
                    sttBtn.textContent = 'üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á';
                    sttBtn.classList.add('recording');
                    isListening = true;
                }
            });

        } else {
            sttResult.innerHTML = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢, ‡∏ö‡∏£‡∏≤‡∏ß‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Speech Recognition API";
            sttBtn.disabled = true;
        }

    </script>
</body>
</html>
